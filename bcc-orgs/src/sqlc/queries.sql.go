// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: queries.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createAddress = `-- name: CreateAddress :one
    INSERT INTO address (
        street_1,
        street_2,
        city,
        region, 
        country_iso_2_code,
        postal_code,
        country_name,
        country_name_native
    ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
    RETURNING address_id
`

type CreateAddressParams struct {
	Street1           sql.NullString `db:"street_1"`
	Street2           sql.NullString `db:"street_2"`
	City              sql.NullString `db:"city"`
	Region            sql.NullString `db:"region"`
	CountryIso2Code   sql.NullString `db:"country_iso_2_code"`
	PostalCode        sql.NullString `db:"postal_code"`
	CountryName       sql.NullString `db:"country_name"`
	CountryNameNative sql.NullString `db:"country_name_native"`
}

func (q *Queries) CreateAddress(ctx context.Context, arg CreateAddressParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createAddress,
		arg.Street1,
		arg.Street2,
		arg.City,
		arg.Region,
		arg.CountryIso2Code,
		arg.PostalCode,
		arg.CountryName,
		arg.CountryNameNative,
	)
	var address_id int32
	err := row.Scan(&address_id)
	return address_id, err
}

const createOrg = `-- name: CreateOrg :one
    INSERT INTO org (
        name,
        legal_name,
        type,
        fk_visiting_address_id,
        fk_postal_address_id,
        fk_billing_address_id
    ) VALUES ($1, $2, $3, $4, $5, $6)
    RETURNING org_id
`

type CreateOrgParams struct {
	Name                string         `db:"name"`
	LegalName           sql.NullString `db:"legal_name"`
	Type                string         `db:"type"`
	FkVisitingAddressID sql.NullInt32  `db:"fk_visiting_address_id"`
	FkPostalAddressID   sql.NullInt32  `db:"fk_postal_address_id"`
	FkBillingAddressID  sql.NullInt32  `db:"fk_billing_address_id"`
}

func (q *Queries) CreateOrg(ctx context.Context, arg CreateOrgParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createOrg,
		arg.Name,
		arg.LegalName,
		arg.Type,
		arg.FkVisitingAddressID,
		arg.FkPostalAddressID,
		arg.FkBillingAddressID,
	)
	var org_id int32
	err := row.Scan(&org_id)
	return org_id, err
}

const getOrgs = `-- name: GetOrgs :many
	SELECT
		o.org_id, o.name, o.legal_name, o.type, o.fk_visiting_address_id, o.fk_postal_address_id, o.fk_billing_address_id,
		va.street_1 AS "va__street_1",
		va.street_2 AS "va__street_2",
		va.city AS "va__city",
		va.region AS "va__region",
		va.country_iso_2_code AS "va__country_iso_2_code",
		va.postal_code AS "va__postal_code",
		va.country_name AS "va__country_name",
		va.country_name_native AS "va__country_name_native",
		pa.street_1 AS "pa__street_1",
		pa.street_2 AS "pa__street_2",
		pa.city AS "pa__city",
		pa.region AS "pa__region",
		pa.country_iso_2_code AS "pa__country_iso_2_code",
		pa.postal_code AS "pa__postal_code",
		pa.country_name AS "pa__country_name",
		pa.country_name_native AS "pa__country_name_native",
		ba.street_1 AS "ba__street_1",
		ba.street_2 AS "ba__street_2",
		ba.city AS "ba__city",
		ba.region AS "ba__region",
		ba.country_iso_2_code AS "ba__country_iso_2_code",
		ba.postal_code AS "ba__postal_code",
		ba.country_name AS "ba__country_name",
		ba.country_name_native AS "ba__country_name_native"
	FROM org AS o
		LEFT JOIN address AS va ON va.address_id = o.fk_visiting_address_id
		LEFT JOIN address AS pa ON pa.address_id = o.fk_postal_address_id
		LEFT JOIN address AS ba ON ba.address_id = o.fk_billing_address_id
`

type GetOrgsRow struct {
	OrgID               int32          `db:"org_id"`
	Name                string         `db:"name"`
	LegalName           sql.NullString `db:"legal_name"`
	Type                string         `db:"type"`
	FkVisitingAddressID sql.NullInt32  `db:"fk_visiting_address_id"`
	FkPostalAddressID   sql.NullInt32  `db:"fk_postal_address_id"`
	FkBillingAddressID  sql.NullInt32  `db:"fk_billing_address_id"`
	VaStreet1           sql.NullString `db:"va__street_1"`
	VaStreet2           sql.NullString `db:"va__street_2"`
	VaCity              sql.NullString `db:"va__city"`
	VaRegion            sql.NullString `db:"va__region"`
	VaCountryIso2Code   sql.NullString `db:"va__country_iso_2_code"`
	VaPostalCode        sql.NullString `db:"va__postal_code"`
	VaCountryName       sql.NullString `db:"va__country_name"`
	VaCountryNameNative sql.NullString `db:"va__country_name_native"`
	PaStreet1           sql.NullString `db:"pa__street_1"`
	PaStreet2           sql.NullString `db:"pa__street_2"`
	PaCity              sql.NullString `db:"pa__city"`
	PaRegion            sql.NullString `db:"pa__region"`
	PaCountryIso2Code   sql.NullString `db:"pa__country_iso_2_code"`
	PaPostalCode        sql.NullString `db:"pa__postal_code"`
	PaCountryName       sql.NullString `db:"pa__country_name"`
	PaCountryNameNative sql.NullString `db:"pa__country_name_native"`
	BaStreet1           sql.NullString `db:"ba__street_1"`
	BaStreet2           sql.NullString `db:"ba__street_2"`
	BaCity              sql.NullString `db:"ba__city"`
	BaRegion            sql.NullString `db:"ba__region"`
	BaCountryIso2Code   sql.NullString `db:"ba__country_iso_2_code"`
	BaPostalCode        sql.NullString `db:"ba__postal_code"`
	BaCountryName       sql.NullString `db:"ba__country_name"`
	BaCountryNameNative sql.NullString `db:"ba__country_name_native"`
}

func (q *Queries) GetOrgs(ctx context.Context) ([]GetOrgsRow, error) {
	rows, err := q.db.QueryContext(ctx, getOrgs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetOrgsRow
	for rows.Next() {
		var i GetOrgsRow
		if err := rows.Scan(
			&i.OrgID,
			&i.Name,
			&i.LegalName,
			&i.Type,
			&i.FkVisitingAddressID,
			&i.FkPostalAddressID,
			&i.FkBillingAddressID,
			&i.VaStreet1,
			&i.VaStreet2,
			&i.VaCity,
			&i.VaRegion,
			&i.VaCountryIso2Code,
			&i.VaPostalCode,
			&i.VaCountryName,
			&i.VaCountryNameNative,
			&i.PaStreet1,
			&i.PaStreet2,
			&i.PaCity,
			&i.PaRegion,
			&i.PaCountryIso2Code,
			&i.PaPostalCode,
			&i.PaCountryName,
			&i.PaCountryNameNative,
			&i.BaStreet1,
			&i.BaStreet2,
			&i.BaCity,
			&i.BaRegion,
			&i.BaCountryIso2Code,
			&i.BaPostalCode,
			&i.BaCountryName,
			&i.BaCountryNameNative,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAddress = `-- name: UpdateAddress :one
    UPDATE address
        SET street_1 = $2, 
            street_2 = $3, 
            city = $4, 
            region = $5, 
            country_iso_2_code = $6, 
            postal_code = $7, 
            country_name = $8, 
            country_name_native = $9
        WHERE address_id = $1
        RETURNING address_id
`

type UpdateAddressParams struct {
	AddressID         int32          `db:"address_id"`
	Street1           sql.NullString `db:"street_1"`
	Street2           sql.NullString `db:"street_2"`
	City              sql.NullString `db:"city"`
	Region            sql.NullString `db:"region"`
	CountryIso2Code   sql.NullString `db:"country_iso_2_code"`
	PostalCode        sql.NullString `db:"postal_code"`
	CountryName       sql.NullString `db:"country_name"`
	CountryNameNative sql.NullString `db:"country_name_native"`
}

func (q *Queries) UpdateAddress(ctx context.Context, arg UpdateAddressParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, updateAddress,
		arg.AddressID,
		arg.Street1,
		arg.Street2,
		arg.City,
		arg.Region,
		arg.CountryIso2Code,
		arg.PostalCode,
		arg.CountryName,
		arg.CountryNameNative,
	)
	var address_id int32
	err := row.Scan(&address_id)
	return address_id, err
}

const updateOrg = `-- name: UpdateOrg :one
    UPDATE org 
        SET name = $2, 
            legal_name = $3, 
            type = $4
        WHERE org_id = $1
    RETURNING org_id
`

type UpdateOrgParams struct {
	OrgID     int32          `db:"org_id"`
	Name      string         `db:"name"`
	LegalName sql.NullString `db:"legal_name"`
	Type      string         `db:"type"`
}

func (q *Queries) UpdateOrg(ctx context.Context, arg UpdateOrgParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, updateOrg,
		arg.OrgID,
		arg.Name,
		arg.LegalName,
		arg.Type,
	)
	var org_id int32
	err := row.Scan(&org_id)
	return org_id, err
}
