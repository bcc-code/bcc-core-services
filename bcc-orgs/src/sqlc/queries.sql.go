// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: queries.sql

package sqlc

import (
	"context"
	"database/sql"

	null_v4 "gopkg.in/guregu/null.v4"
)

const getOrg = `-- name: GetOrg :one
SELECT
    o.org_id, o.name, o.legal_name, o.type, o.fk_visiting_address_id, o.fk_postal_address_id, o.fk_billing_address_id,
    va.address_id AS "va__address_id",
    va.street_1 AS "va__street_1",
    va.street_2 AS "va__street_2",
    va.city AS "va__city",
    va.region AS "va__region",
    va.country_iso_2_code AS "va__country_iso_2_code",
    va.postal_code AS "va__postal_code",
    va.country_name AS "va__country_name",
    va.country_name_native AS "va__country_name_native",
    pa.address_id AS "pa__address_id",
    pa.street_1 AS "pa__street_1",
    pa.street_2 AS "pa__street_2",
    pa.city AS "pa__city",
    pa.region AS "pa__region",
    pa.country_iso_2_code AS "pa__country_iso_2_code",
    pa.postal_code AS "pa__postal_code",
    pa.country_name AS "pa__country_name",
    pa.country_name_native AS "pa__country_name_native",
    ba.address_id AS "ba__address_id",
    ba.address_id AS "ba__address_id",
    ba.street_1 AS "ba__street_1",
    ba.street_2 AS "ba__street_2",
    ba.city AS "ba__city",
    ba.region AS "ba__region",
    ba.country_iso_2_code AS "ba__country_iso_2_code",
    ba.postal_code AS "ba__postal_code",
    ba.country_name AS "ba__country_name",
    ba.country_name_native AS "ba__country_name_native"
FROM org AS o
    LEFT JOIN address AS va ON va.address_id = o.fk_visiting_address_id
    LEFT JOIN address AS pa ON pa.address_id = o.fk_postal_address_id
    LEFT JOIN address AS ba ON ba.address_id = o.fk_billing_address_id
WHERE o.org_id = $1
LIMIT 1
`

type GetOrgRow struct {
	OrgID               int32          `db:"org_id"`
	Name                string         `db:"name"`
	LegalName           null_v4.String `db:"legal_name"`
	Type                string         `db:"type"`
	FkVisitingAddressID sql.NullInt32  `db:"fk_visiting_address_id"`
	FkPostalAddressID   sql.NullInt32  `db:"fk_postal_address_id"`
	FkBillingAddressID  sql.NullInt32  `db:"fk_billing_address_id"`
	VaAddressID         sql.NullInt32  `db:"va__address_id"`
	VaStreet1           null_v4.String `db:"va__street_1"`
	VaStreet2           null_v4.String `db:"va__street_2"`
	VaCity              null_v4.String `db:"va__city"`
	VaRegion            null_v4.String `db:"va__region"`
	VaCountryIso2Code   null_v4.String `db:"va__country_iso_2_code"`
	VaPostalCode        null_v4.String `db:"va__postal_code"`
	VaCountryName       null_v4.String `db:"va__country_name"`
	VaCountryNameNative null_v4.String `db:"va__country_name_native"`
	PaAddressID         sql.NullInt32  `db:"pa__address_id"`
	PaStreet1           null_v4.String `db:"pa__street_1"`
	PaStreet2           null_v4.String `db:"pa__street_2"`
	PaCity              null_v4.String `db:"pa__city"`
	PaRegion            null_v4.String `db:"pa__region"`
	PaCountryIso2Code   null_v4.String `db:"pa__country_iso_2_code"`
	PaPostalCode        null_v4.String `db:"pa__postal_code"`
	PaCountryName       null_v4.String `db:"pa__country_name"`
	PaCountryNameNative null_v4.String `db:"pa__country_name_native"`
	BaAddressID         sql.NullInt32  `db:"ba__address_id"`
	BaAddressID_2       sql.NullInt32  `db:"ba__address_id_2"`
	BaStreet1           null_v4.String `db:"ba__street_1"`
	BaStreet2           null_v4.String `db:"ba__street_2"`
	BaCity              null_v4.String `db:"ba__city"`
	BaRegion            null_v4.String `db:"ba__region"`
	BaCountryIso2Code   null_v4.String `db:"ba__country_iso_2_code"`
	BaPostalCode        null_v4.String `db:"ba__postal_code"`
	BaCountryName       null_v4.String `db:"ba__country_name"`
	BaCountryNameNative null_v4.String `db:"ba__country_name_native"`
}

func (q *Queries) GetOrg(ctx context.Context, orgID int32) (GetOrgRow, error) {
	row := q.db.QueryRowContext(ctx, getOrg, orgID)
	var i GetOrgRow
	err := row.Scan(
		&i.OrgID,
		&i.Name,
		&i.LegalName,
		&i.Type,
		&i.FkVisitingAddressID,
		&i.FkPostalAddressID,
		&i.FkBillingAddressID,
		&i.VaAddressID,
		&i.VaStreet1,
		&i.VaStreet2,
		&i.VaCity,
		&i.VaRegion,
		&i.VaCountryIso2Code,
		&i.VaPostalCode,
		&i.VaCountryName,
		&i.VaCountryNameNative,
		&i.PaAddressID,
		&i.PaStreet1,
		&i.PaStreet2,
		&i.PaCity,
		&i.PaRegion,
		&i.PaCountryIso2Code,
		&i.PaPostalCode,
		&i.PaCountryName,
		&i.PaCountryNameNative,
		&i.BaAddressID,
		&i.BaAddressID_2,
		&i.BaStreet1,
		&i.BaStreet2,
		&i.BaCity,
		&i.BaRegion,
		&i.BaCountryIso2Code,
		&i.BaPostalCode,
		&i.BaCountryName,
		&i.BaCountryNameNative,
	)
	return i, err
}

const getOrgs = `-- name: GetOrgs :many
SELECT
    o.org_id, o.name, o.legal_name, o.type, o.fk_visiting_address_id, o.fk_postal_address_id, o.fk_billing_address_id,
    va.address_id AS "va__address_id",
    va.street_1 AS "va__street_1",
    va.street_2 AS "va__street_2",
    va.city AS "va__city",
    va.region AS "va__region",
    va.country_iso_2_code AS "va__country_iso_2_code",
    va.postal_code AS "va__postal_code",
    va.country_name AS "va__country_name",
    va.country_name_native AS "va__country_name_native",
    pa.address_id AS "pa__address_id",
    pa.street_1 AS "pa__street_1",
    pa.street_2 AS "pa__street_2",
    pa.city AS "pa__city",
    pa.region AS "pa__region",
    pa.country_iso_2_code AS "pa__country_iso_2_code",
    pa.postal_code AS "pa__postal_code",
    pa.country_name AS "pa__country_name",
    pa.country_name_native AS "pa__country_name_native",
    ba.address_id AS "ba__address_id",
    ba.address_id AS "ba__address_id",
    ba.street_1 AS "ba__street_1",
    ba.street_2 AS "ba__street_2",
    ba.city AS "ba__city",
    ba.region AS "ba__region",
    ba.country_iso_2_code AS "ba__country_iso_2_code",
    ba.postal_code AS "ba__postal_code",
    ba.country_name AS "ba__country_name",
    ba.country_name_native AS "ba__country_name_native"
FROM org AS o
    LEFT JOIN address AS va ON va.address_id = o.fk_visiting_address_id
    LEFT JOIN address AS pa ON pa.address_id = o.fk_postal_address_id
    LEFT JOIN address AS ba ON ba.address_id = o.fk_billing_address_id
`

type GetOrgsRow struct {
	OrgID               int32          `db:"org_id"`
	Name                string         `db:"name"`
	LegalName           null_v4.String `db:"legal_name"`
	Type                string         `db:"type"`
	FkVisitingAddressID sql.NullInt32  `db:"fk_visiting_address_id"`
	FkPostalAddressID   sql.NullInt32  `db:"fk_postal_address_id"`
	FkBillingAddressID  sql.NullInt32  `db:"fk_billing_address_id"`
	VaAddressID         sql.NullInt32  `db:"va__address_id"`
	VaStreet1           null_v4.String `db:"va__street_1"`
	VaStreet2           null_v4.String `db:"va__street_2"`
	VaCity              null_v4.String `db:"va__city"`
	VaRegion            null_v4.String `db:"va__region"`
	VaCountryIso2Code   null_v4.String `db:"va__country_iso_2_code"`
	VaPostalCode        null_v4.String `db:"va__postal_code"`
	VaCountryName       null_v4.String `db:"va__country_name"`
	VaCountryNameNative null_v4.String `db:"va__country_name_native"`
	PaAddressID         sql.NullInt32  `db:"pa__address_id"`
	PaStreet1           null_v4.String `db:"pa__street_1"`
	PaStreet2           null_v4.String `db:"pa__street_2"`
	PaCity              null_v4.String `db:"pa__city"`
	PaRegion            null_v4.String `db:"pa__region"`
	PaCountryIso2Code   null_v4.String `db:"pa__country_iso_2_code"`
	PaPostalCode        null_v4.String `db:"pa__postal_code"`
	PaCountryName       null_v4.String `db:"pa__country_name"`
	PaCountryNameNative null_v4.String `db:"pa__country_name_native"`
	BaAddressID         sql.NullInt32  `db:"ba__address_id"`
	BaAddressID_2       sql.NullInt32  `db:"ba__address_id_2"`
	BaStreet1           null_v4.String `db:"ba__street_1"`
	BaStreet2           null_v4.String `db:"ba__street_2"`
	BaCity              null_v4.String `db:"ba__city"`
	BaRegion            null_v4.String `db:"ba__region"`
	BaCountryIso2Code   null_v4.String `db:"ba__country_iso_2_code"`
	BaPostalCode        null_v4.String `db:"ba__postal_code"`
	BaCountryName       null_v4.String `db:"ba__country_name"`
	BaCountryNameNative null_v4.String `db:"ba__country_name_native"`
}

func (q *Queries) GetOrgs(ctx context.Context) ([]GetOrgsRow, error) {
	rows, err := q.db.QueryContext(ctx, getOrgs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetOrgsRow
	for rows.Next() {
		var i GetOrgsRow
		if err := rows.Scan(
			&i.OrgID,
			&i.Name,
			&i.LegalName,
			&i.Type,
			&i.FkVisitingAddressID,
			&i.FkPostalAddressID,
			&i.FkBillingAddressID,
			&i.VaAddressID,
			&i.VaStreet1,
			&i.VaStreet2,
			&i.VaCity,
			&i.VaRegion,
			&i.VaCountryIso2Code,
			&i.VaPostalCode,
			&i.VaCountryName,
			&i.VaCountryNameNative,
			&i.PaAddressID,
			&i.PaStreet1,
			&i.PaStreet2,
			&i.PaCity,
			&i.PaRegion,
			&i.PaCountryIso2Code,
			&i.PaPostalCode,
			&i.PaCountryName,
			&i.PaCountryNameNative,
			&i.BaAddressID,
			&i.BaAddressID_2,
			&i.BaStreet1,
			&i.BaStreet2,
			&i.BaCity,
			&i.BaRegion,
			&i.BaCountryIso2Code,
			&i.BaPostalCode,
			&i.BaCountryName,
			&i.BaCountryNameNative,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
